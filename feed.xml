<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>慎独</title>
    <description>博学之，审问之，慎思之，明辨之，笃行之
</description>
    <link>http://sleefd.github.io/newblog/</link>
    <atom:link href="http://sleefd.github.io/newblog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Fri, 02 Jan 2015 20:55:42 +0800</pubDate>
    <lastBuildDate>Fri, 02 Jan 2015 20:55:42 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>new-jekyll-blog</title>
        <description>&lt;p&gt;在windows上安装octopress遇到一些问题，如下：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;我安装的是ruby2.0，但gemfile.lock中的ffi版本太低，无法本地编译ffi，修改gemfile中的ffi为高版本就可以了。&lt;/li&gt;
  &lt;li&gt;bundle install成功后，rake generate提示iconv找不到, 原来ruby2.0, iconv module被deprecated，没办法，ruby2.0安装octopress不成功，除非修改rakefile，将用到iconv的地方换成其他库。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;最后决定回归本真，还是用jekyll，ruby2.0直接&lt;code&gt;gem install jekyll&lt;/code&gt;就ok了，无任何问题。&lt;/p&gt;

&lt;p&gt;仔细阅读了下jekyll官网文档，知道了原来github任意repo的ghpage分支也能用来部署website，只要把
website代码push到repo的ghpage分支，然后通过yourname.github.com/repo-name就可以访问到。这样就太好了,
原来的博客可保留在&lt;a href=&quot;http://sleefd.github.com&quot;&gt;sleefd.github.com&lt;/a&gt;链接，新jekyll博客在&lt;a href=&quot;http://sleefd.github.com/newblog&quot;&gt;sleefd.github.com/newblog&lt;/a&gt;。最后我的github repo是这样的:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;repo name: newblog, 于是我可以通过sleefd.gihtub.io/newblog，来访问我新部署的jekyll blog.
remote branch: master与gh-pages,其中gh-pages跟踪_site文件夹的内容,master跟踪其他所有文件夹.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;jekyll使用时遇到的两个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;开始我github新建的repo名字为blog，导致原博客的post无法访问，是因为原博客的post访问链接以sleefd.github.io/blog开始，新jekyll博客也是，名字冲突，改repo名为newblog就好了。&lt;/li&gt;
  &lt;li&gt;jekyll serve 无法在localhost:4000预览博客内容，部署后也无法在newblog链接访问新post内容。看jekyll官网文档解决。修改_config.yml中的baseurl为’/newblog’,启动server命令改为&lt;code&gt;jekyll serve --baseurl &#39;&#39;&lt;/code&gt;即可。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;另外jekyll不像octopress那样, 可以直接执行rake task来创建新post和部署博客到github，于是把Octopress中的Rakefile拿过来改改，就可通过&lt;code&gt;rake post[&#39;title&#39;]&lt;/code&gt;创建新post，通过&lt;code&gt;rake deploy&lt;/code&gt;同步source和gh-pages代码到远程的github repo。附上Rakefile如下：&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/0ec44f5202e4f864e4a5.js&quot;&gt; &lt;/script&gt;

</description>
        <pubDate>Fri, 02 Jan 2015 18:07:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/2015/01/02/new-jekyll-blog.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/2015/01/02/new-jekyll-blog.html</guid>
        
        
      </item>
    
      <item>
        <title>octopress博客迁移到新电脑</title>
        <description>&lt;p&gt;本来是用octopress写博客，但是上班换了新电脑，需要在新电脑上重新部署octopress。&lt;/p&gt;

&lt;p&gt;首先clone下source分支的代码,然后clone master分支的代码到_deploy文件夹中。master分支存放的是渲染后的博客，source分支存放的是octopress代码以及主题等。github访问xx.github.com，访问的就是该repo下的master分支代码。&lt;/p&gt;

&lt;p&gt;重新部署的时候遇到下面几个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;source分支的代码从来没有上传过， github上只保存有最新的master分支的文件。&lt;/li&gt;
  &lt;li&gt;rake new_post，然后rake deploy之后，_deploy文件夹被清空，然后重新生成，导致原来的所有post遗失。&lt;/li&gt;
  &lt;li&gt;所有post的markdown文件遗失，无法重新生成所有的html文件。如果源markdown没有遗失，啥事都没有，哎。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;尝试过这样一些解决方法：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;修改Rakefile，修改push task，每次push都不删除deploy文件，不行。因为new_post会产生新的index.html和sitemap，虽然保留有旧的post html，但没法从index.html访问到。&lt;/li&gt;
  &lt;li&gt;复制deploy中的文件到source文件夹中，因为source文件夹缺少一些资源，还是不行。rake generate的时候，没有更新index.html。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;稍后有时间再试一试方法2，可以先把资源拷贝到source里面，然后修改index，保有原来的post链接，新链接可添加在index里面。如果还是不行的话，就只能写个脚本调用pandoc将html转化成markdown，然后再把所有post的markdown丢到soure的post文件夹下面了。&lt;/p&gt;

&lt;p&gt;这次重新deploy帮助review了好多东西，首先是github的基本概念，然后是branch的基本操作，remote的基本操作,怎样阅读diff文件等等。决定抽时间看git pro，系统的学习一下git的操作。&lt;/p&gt;
</description>
        <pubDate>Tue, 30 Dec 2014 04:35:27 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/jekyll/update/2014/12/30/move-octopress.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/jekyll/update/2014/12/30/move-octopress.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
