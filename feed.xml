<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>慎独</title>
    <description>博学之，审问之，慎思之，明辨之，笃行之
</description>
    <link>http://sleefd.github.io/newblog/</link>
    <atom:link href="http://sleefd.github.io/newblog/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 10 Sep 2015 09:58:27 +0800</pubDate>
    <lastBuildDate>Thu, 10 Sep 2015 09:58:27 +0800</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>使用Gson解析json字符串</title>
        <description>&lt;p&gt;Gson是google开发的json序列化与反序列化开源lib,个人觉得相比于其他json解析库比如jackson与Java内置的JSONObject都好用。
正好工作中有用到，因此仔细看了Gson官方文档，并总结如下。&lt;/p&gt;

&lt;p&gt;gson object是无状态的，一个gson object可以重复使用，gson提供了
一些有用的工厂方法来进行序列化与反序列化。&lt;/p&gt;

&lt;h4 id=&quot;simple-object-&quot;&gt;simple object 序列化与反序列化&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//primitive,class，connection都支持&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;section&quot;&gt;泛型反序列化&lt;/h4&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;students&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;student1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//get a json array with json object&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Type&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentListType&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TypeToken&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;(){}.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//store generical type&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentsList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;studentListType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4 id=&quot;json&quot;&gt;解析复杂复合json对象&lt;/h4&gt;

&lt;p&gt;parse json字符串&lt;code&gt; {&quot;name&quot;:&quot;slee&quot;,&quot;columns&quot;:[{&quot;name&quot;:&quot;a&quot;,&quot;type&quot;:&quot;int&quot;},{&quot;name&quot;:&quot;b&quot;,&quot;type&quot;:&quot;int&quot;}]}&lt;/code&gt;
得到columns的所有name值.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/** three methods to parse above json string */&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;//use fromJson and toJson&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Gson&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonArray&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;columns&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;obj:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//no need to defined specified class, use object  ok&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fromJson&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;obj&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;//use gson streaming api, hard to use, need to be very careful&lt;/span&gt;


&lt;span class=&quot;c1&quot;&gt;//use gson tree api&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonParser&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;JsonParser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonElement&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;json&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;JsonArray&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;element&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsJsonObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsJsonArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;columns&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;JsonElement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jsonElement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonElement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsJsonObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAsString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;参考：&lt;a href=&quot;http://www.studytrails.com/java/json/java-google-json-introduction.jsp&quot;&gt;Gson introduction&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 20:58:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/learn/2015/09/09/gson-usage.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/learn/2015/09/09/gson-usage.html</guid>
        
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>git问题again</title>
        <description>&lt;p&gt;最近又遇到两个git相关的问题，记录在此。&lt;/p&gt;

&lt;p&gt;问题1，amend commit之后无法再次push到remote&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git commit
git push remote branch
&lt;span class=&quot;c&quot;&gt;### modify something&lt;/span&gt;
git commit --amend	
git push remote branch &lt;span class=&quot;c&quot;&gt;# failed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;push失败是由于同一个commit但内容不同造成的，
如果这个repo只有你一个人开发，可以强制push:
&lt;code&gt;git -f push remote branch&lt;/code&gt;.
否则可采取比较dirty的做法，删掉remote branch,
重新push上去.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git push remote branch :branch &lt;span class=&quot;c&quot;&gt;#delete remote branch&lt;/span&gt;
git push remote branch  &lt;span class=&quot;c&quot;&gt;# recreate remote branch&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;问题2：如何获取remote新增的branch&lt;/p&gt;

&lt;p&gt;情况是这样的，fork了一个remote repo，开始只有一个branch，
然后remote新增了一个branch，如何获取这个新增的branch，
可以先pull，然后checkout新branch，再push到自己的remote就可以了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git pull upstream master
git remote -v &lt;span class=&quot;c&quot;&gt;# upstream/newbranch&lt;/span&gt;
git checkout -b upstream/newbranch
git push yourremote newbranch&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 09 Sep 2015 19:46:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/learn/2015/09/09/git-problem.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/learn/2015/09/09/git-problem.html</guid>
        
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>win下local模式运行hadoop作业</title>
        <description>&lt;p&gt;之前测试mr算法，都是通过写MRUnit来测试map或reduce逻辑完成(通过MiniYarnCluster或MiniMRYarnCluster来做测试更可靠，MRUnit测试非常有限)。然后在单元测试没问题后，
整个算法打fatjar放到集群上运行来保证正确性。&lt;/p&gt;

&lt;p&gt;但fatjar较大，打一个fatjar包需花费大量时间，并且每次修改都要重新打fatjar，而且还要上传到集群测试非常麻烦，所以
考虑以hadoop local模式运行mr算法, 无需打jar包，直接运行本地小量数据，测试算法正确性，非常方便。&lt;/p&gt;

&lt;p&gt;要想在win下以local模式运行hadoop作业，必须在win下重新编译native hadoop, 否则直接下载的官方安装包，在运行过程中会
因为缺少winutils.exe、dll、lib等native libraries报错。出现以下错误都是由于缺少这些包：&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-java&quot; data-lang=&quot;java&quot;&gt;&lt;span class=&quot;n&quot;&gt;ERROR&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Shell&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getWinUtilsPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;303&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Failed&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;winutils&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hadoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binary&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Could&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;locate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;executable&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bin&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;\&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;winutils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;exe&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;the&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Hadoop&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;binaries&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NullPointerException&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lang&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ProcessBuilder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1012&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;apache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hadoop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;util&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;runCommand&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Shell&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;java&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;at&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;因此第一步是win下编译hadoop，可参见hadoop官方文档，有说明如何基于win平台编译hadoop。
编译成功后，相比于官方提供的安装包，bin目录下会多了winuitls.exe, hadoop.dll等文件，
这就是我们所需要的。&lt;/p&gt;

&lt;p&gt;第二步配置环境变量HADOOP_HOME为hadoop位置。&lt;/p&gt;

&lt;p&gt;第三步直接运行算法，会启动hadoop local_job。
可在工程中加入log4j配置，开启debug模式，这样在作业运行过程中就可以看到hadoop
输出的一些日志信息便于调试。（注：在工程中加入log4j配置文件，是调试开源项目非常好的手段，
有时候没有这些日志完全不知道错误出在哪里）。&lt;/p&gt;

&lt;p&gt;local模式下job的输入输出绝对路径是以工程所在磁盘为根目录，相对路径是以项目位置为根目录。&lt;/p&gt;

&lt;p&gt;比如绝对路径/user/root/test对应为disk:/user/root/test,相对路径root/text则对应disk:/yourproject/root/test,
其中disk为项目所在磁盘。&lt;/p&gt;

</description>
        <pubDate>Mon, 31 Aug 2015 14:24:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/bigdata/2015/08/31/run-hadoop-local-mode.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/bigdata/2015/08/31/run-hadoop-local-mode.html</guid>
        
        
        <category>bigdata</category>
        
      </item>
    
      <item>
        <title>git fork工作流</title>
        <description>&lt;p&gt;项目代码库开始和gerrit关联，用gerrit做code review，然后又突然换成自建的gitlab，
然后就有了这篇文章.&lt;/p&gt;

&lt;p&gt;换成gitlab之后，需要以fork/pull request的方式提交代码,code review，因此
有必要了解git fork工作流.
(zz: gitlab-&amp;gt;gitlab-&amp;gt;gerrit-gitlab，这样换来换去有意思吗,呵呵,遇到commit问题，从来不想着方法去解决，而是更换版本控制工具也是醉了)&lt;/p&gt;

&lt;p&gt;首先fork central repo，这样自己的gitlab projects下就多了一个central repo的副本，后续的提交都应该提交到每个人自己的repo，
而不能提交到central repo. 这也是fork工作流的好处，控制central repo的访问权限，不会有任何人的commits污染整个项目.&lt;/p&gt;

&lt;p&gt;其次, 我的本地仓库在gerrit时代已经有了，上面也包含几个我正在开发新特性的分支，所以不可能clone我的gitlab repo重新开发。
因此第一步需要更换master branch的remote为新gitlab仓库的地址. 有两种方法:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# add remote and modify master branch&amp;#39;s remote to the new remote&lt;/span&gt;
git remote add gitlab repo-git-url 
git config branch.master.remote  gitlab

&lt;span class=&quot;c&quot;&gt;# or change old remote url directly, suppose origin the old remote&lt;/span&gt;
git remote &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt;-url origin repo-git-url&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;这样后续push可以直接到gitlab上的repo里，而remote对应的也是master分支，不会
出现your head is ahead of master xx commits这种提示.&lt;/p&gt;

&lt;p&gt;然后后续开发还是以分支开发的形式就行，每个新特性开发对应一个branch, 单独在这个branch  &lt;br /&gt;
commit代码.&lt;/p&gt;

&lt;p&gt;然后怎么code review呢,发pull request就行了，俗称pr.
gitlab是merge request，github是pull request。
选择自己项目的分支以及central对应的分支名称，@相关人员就ok了。&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;有感：怎么样的环境就有什么样的坑爹事情发生，爱咋地咋地.&lt;/p&gt;
</description>
        <pubDate>Fri, 28 Aug 2015 17:28:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/learn/2015/08/28/mod-git-remote.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/learn/2015/08/28/mod-git-remote.html</guid>
        
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>win下sqoop1.99.6编译</title>
        <description>&lt;p&gt;sqoop使用maven进行项目构建，所以按照maven的构建方式编译源码即可，
官网也有说明编译步骤。&lt;/p&gt;

&lt;p&gt;编译过程中遇到一些小问题，一并记录在次。&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;下载源码&lt;/h3&gt;
&lt;p&gt;clone github上sqoop的源码，可以看到很多分支，现在working的sqoop分支是sqoop2，
因为要编译1.99.6，所以直接checkout branch-1.99.6&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git clone https://github.com/apache/sqoop.git
git branch -a &lt;span class=&quot;c&quot;&gt;# show all the branches&lt;/span&gt;
git checkout branch-1.99.6&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-1&quot;&gt;编译源码&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mvn compile -DskipTests &lt;span class=&quot;c&quot;&gt;# compile, skip tests, fast compile speed&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;编译到common包，执行saveVersion.sh遇到问题&lt;strong&gt;invalid escape character \&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;saveVersion.sh生成package-info.java文件中的注解。
打开生成的package-info.java一开，发现user字符串的内容为”slee\sleefd”,
显然在java中是非法字符串，可以改为&lt;code&gt;\\&lt;/code&gt;或直接改为&lt;code&gt;/&lt;/code&gt;即可,继续
编译ok。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;打包发布&lt;/h3&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;mvn package -Dbinary -DskipTests&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;section-3&quot;&gt;安装&lt;/h3&gt;
&lt;p&gt;安装包在dist/target目录中.具体安装方式可参考官方安装文档，但win下编译的代码在linux下使用会遇到问题：&lt;/p&gt;

&lt;p&gt;tar.gz包传到linux上后解压，配置完毕，运行bin目录下的shell脚本，terminal提示
&lt;strong&gt;no such file or direcotory&lt;/strong&gt; 。&lt;/p&gt;

&lt;p&gt;这是由于这些shell脚本都是dos格式，不是unix格式，可vim打开后，通过 :set ff，
查看文件格式，把这些shell脚本转为unix格式，问题解决。&lt;/p&gt;

&lt;p&gt;可执行命令dos2unix，完成转换. linux下需要安装了该命令才能使用，win下git的
bash自带该命令，估计cygwin也有这个命令。解决该问题后可成功启动sqoop2-server.&lt;/p&gt;
</description>
        <pubDate>Fri, 21 Aug 2015 12:47:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/bigdata/2015/08/21/sqoop-compile.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/bigdata/2015/08/21/sqoop-compile.html</guid>
        
        
        <category>bigdata</category>
        
      </item>
    
      <item>
        <title>git相关操作</title>
        <description>&lt;p&gt;平时自用git涉及不到什么高级的用法，因为也就一个人开发。
最近工作上用gerrit提交代码, 遇到很多问题, 发现对git的有些
操作并不了解，现总结一些问题及命令如下：&lt;/p&gt;

&lt;h3 id=&quot;pullgit-review-pullpush&quot;&gt;每次提交代码都应该先pull，再git review; 或者先pull，再push&lt;/h3&gt;
&lt;p&gt;pull保证本地代码与remote一致，再push自己本地的修改到remote,这样不会有冲突。&lt;/p&gt;

&lt;p&gt;直接push很可能有冲突。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git pull origin master
&lt;span class=&quot;c&quot;&gt;### other operations&lt;/span&gt;
git push origin master&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-commit---amend-amend&quot;&gt;git commit –amend, amend上一次提交，不会产生新提交&lt;/h3&gt;
&lt;p&gt;可用于重新修改comment，或修改上一次提交的文件内容，只是再次commit
时要加上–amend选项。&lt;/p&gt;

&lt;h3 id=&quot;git-add&quot;&gt;丢弃git add到暂存区的文件修改&lt;/h3&gt;

&lt;p&gt;有三种方法，一是在原文件上修改后重新add，staged的相同文件就会被覆盖;&lt;/p&gt;

&lt;p&gt;另一种方法是reset head;&lt;/p&gt;

&lt;p&gt;还可以重新checkout该文件，那么工作区中该文件就会回到未修改之前的状态，再在上面做修改后add.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git reset head filename &lt;span class=&quot;c&quot;&gt;## unstaged filename&lt;/span&gt;
git reset head &lt;span class=&quot;c&quot;&gt;# unstaged all the files&lt;/span&gt;
git checkout -- filename &lt;span class=&quot;c&quot;&gt;# reset file in the workspace&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-reset-&quot;&gt;git reset, 重置到某次提交&lt;/h3&gt;
&lt;p&gt;提交多次后，想回到某次提交的状态，可以使用reset，
reset之后，该次提交之后的所有提交都木有了。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# reset to last second commit,&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# all the modified in head return to workspace&lt;/span&gt;
git reset head~1 

&lt;span class=&quot;c&quot;&gt;# reset to last second commit,all the modified are discarded&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# workspce is clean&lt;/span&gt;
git reset head~1 --hard&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-revert-commit-revertcommit&quot;&gt;git revert commit, revert某次commit&lt;/h3&gt;

&lt;p&gt;会产生一次新的提交，新的提交重置commit的内容&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;c&quot;&gt;# revert head, produce a new commit &amp;quot;revert&amp;quot;&lt;/span&gt;
git revert head  

&lt;span class=&quot;c&quot;&gt;#git revert commit of SHA&lt;/span&gt;
git revert COMMIT_SHA&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-stashclean&quot;&gt;git stash可缓存工作区的内容到一个栈中，让工作区恢复到clean状态&lt;/h3&gt;

&lt;p&gt;可通过git stash apply或git stash pop来恢复最后被暂存的东西（位于栈顶）。&lt;/p&gt;

&lt;p&gt;注意untrack的文件还在workspace中。&lt;/p&gt;

&lt;p&gt;当需要从一个分支切换到另一个分支而有不想commit当前工作内容，可以先stash，
然后切换分支。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git stash
git checkout master 
&lt;span class=&quot;c&quot;&gt;### do sth&lt;/span&gt;
git checkout dev
git stash apply &lt;span class=&quot;c&quot;&gt;# get back what u are doing &lt;/span&gt;

git stash list &lt;span class=&quot;c&quot;&gt;# review all the stashed content&lt;/span&gt;
git stash apply stash@&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;2&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;#choose last second stash apply&lt;/span&gt;
git stash pop &lt;span class=&quot;c&quot;&gt;#apply stash and remove the stash from stash list&lt;/span&gt;
git stash clear &lt;span class=&quot;c&quot;&gt;#clear stashes in stash list&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;rebasemastercommitreview&quot;&gt;新特性在分支开发，开发完毕后，rebase到master，可保证分支的每次commit，都可以review&lt;/h3&gt;

&lt;p&gt;对于较复杂的feature开发，肯定会有多次commit，gerrit分支上的每次commit也会产生changeID, 分支rebase到最新的master,
然后git review，会把所有逻辑化的commit按顺序提交到gerrit进行review,
并且rebase后master的commit历史是线性的不会出现分叉。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git pull origin master &lt;span class=&quot;c&quot;&gt;# update master &lt;/span&gt;

git checkout -b feature
&lt;span class=&quot;c&quot;&gt;## multiple times modify or add &lt;/span&gt;
git add 
git commit  

git rebase master &lt;span class=&quot;c&quot;&gt;##fast merge or fix confilcts&lt;/span&gt;
git checkout master
git merge feature&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;mergepullrebase-&quot;&gt;冲突解决，merge、pull、rebase都可能会有冲突， 冲突解决之后，才能继续操作&lt;/h3&gt;

&lt;p&gt;出现冲突，可先用git status查看有哪些文件冲突，然后一次修改这些文件。&lt;/p&gt;

&lt;p&gt;冲突的地方在«« 与 »»之间，中间由=====分隔开，上下分别代表不同commit的修改内容。&lt;/p&gt;

&lt;p&gt;解决冲突可采取接纳你的代码或其他人的代码或合并的方式，解决完之后重新commit.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git status  &lt;span class=&quot;c&quot;&gt;### check unmerged conflict files&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### fix conflicts&lt;/span&gt;
git add .  &lt;span class=&quot;c&quot;&gt;### stage modified files&lt;/span&gt;
git commit -m &lt;span class=&quot;s2&quot;&gt;&amp;quot;fix conflicts&amp;quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;## commit, fix conflicts over&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;git-detached-head&quot;&gt;git detached head&lt;/h3&gt;

&lt;p&gt;出现detached head是由于checkout了非head的commit，
git checkout master后就没有了&lt;/p&gt;

&lt;h3 id=&quot;git-rebase--i&quot;&gt;git rebase -i,交互式变基，非常强大的功能&lt;/h3&gt;
&lt;p&gt;可重新组织commit的提交顺序，修改commit，拆分commit，
目前只会简单使用。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;git rebase -i commit &lt;span class=&quot;c&quot;&gt;## appear a vim editor contains all the commits after the commit&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;### do some edit, modify pick to edit，you can edit the commit &lt;/span&gt;
git rebase --continue &lt;span class=&quot;c&quot;&gt;## continue rebase, until end the rebase&lt;/span&gt;
git rebase --abort &lt;span class=&quot;c&quot;&gt;## abort rebase, all the ops are canceled&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 20 Aug 2015 16:37:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/learn/2015/08/20/git-related.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/learn/2015/08/20/git-related.html</guid>
        
        
        <category>learn</category>
        
      </item>
    
      <item>
        <title>ajax总是调用error handle</title>
        <description>&lt;p&gt;做进度条展示状态遇到一个问题:发一个ajax请求，轮询后台状态，如果后台
出现异常，在error回调中clearTimeout,结果error总是被调用，轮询总是
被终止。&lt;/p&gt;

&lt;p&gt;浏览器调试，network请求显示成功，服务端spring controller也没出现任何
错误或异常，但前端error总是被call。查stackoverflow发现是dataType问题。&lt;/p&gt;

&lt;p&gt;ajax期望返回的是json数据，但spring controller返回void，response什么
也没有，response与期望返回类型不一致导致always error，ajax 去掉dataType
设置，让浏览器自行推断类型，就没有问题了。&lt;/p&gt;

</description>
        <pubDate>Sun, 05 Jul 2015 13:04:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/front-end/2015/07/05/ajax-always-fail.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/front-end/2015/07/05/ajax-always-fail.html</guid>
        
        
        <category>front-end</category>
        
      </item>
    
      <item>
        <title>修改jekyll默认样式</title>
        <description>&lt;p&gt;jekyll默认模板代码高亮不太好看，posts显示也没有分页,可以对默认样式做一些简单的修改:&lt;/p&gt;

&lt;p&gt;修改代码高亮, 添加分页， 改变css来个性化博客.&lt;/p&gt;

&lt;h3 id=&quot;section&quot;&gt;代码高亮&lt;/h3&gt;

&lt;p&gt;jekyll代码高亮默认采用github的代码高亮css,即是_sass目录下的_syntax-highlighting.scss文件，&lt;/p&gt;

&lt;p&gt;采用scss编写。改变代码高亮需要修改该文件或者添加额外的css覆盖原样式。jekyll支持通过pygments&lt;/p&gt;

&lt;p&gt;插件来实现代码高亮,pygment可生成不同主题的css文件或直接对某段代码实现高亮。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;安装Pygments. pygments是一个Python package，可通过pip安装：&lt;/li&gt;
&lt;/ul&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;python -m pip install pygments&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;生成theme对应的css文件。可通过执行pygmentize脚本来生成css文件。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;win下需要把python安装目录下的scripts文件夹添加到path环境变量.&lt;/p&gt;

&lt;p&gt;我比较喜欢monokai主题,配上黑色很好看。&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;pygmentize -S monokai -f html &amp;gt; monokai.css&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;然后将css文件拷贝到工程css目录并将该文件include到head.html中即可。&lt;/p&gt;

&lt;p&gt;以后所有html文件都将应用该样式.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;_config.yml中将highligher设置为pygments即可.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;navigation&quot;&gt;添加分页及页面navigation&lt;/h3&gt;

&lt;p&gt;_config.yml配置paginate为每页想展现的posts条目数，&lt;/p&gt;

&lt;p&gt;参照&lt;a href=&quot;http://jekyllrb.com/docs/pagination/&quot;&gt;jekyll&lt;/a&gt;官网的写法，将yml代码粘贴index.html中，就能实现post list分页及导航。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;修改样式&lt;/h3&gt;

&lt;p&gt;样式修改可以通过直接修改_sass文件夹中的scss文件或添加额外的scss或css文件，&lt;/p&gt;

&lt;p&gt;再include到html页面中。&lt;/p&gt;

&lt;p&gt;css文件和scss文件都需要放到css文件夹中,scss在build的时候会自动编译为对应的&lt;/p&gt;

&lt;p&gt;css文件，都可以直接在html中include。如果将scss文件放到sass文件夹中，必须被css&lt;/p&gt;

&lt;p&gt;目录下的scss文件import才会被编译生效。&lt;/p&gt;
</description>
        <pubDate>Fri, 19 Jun 2015 19:21:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/2015/06/19/customize-jekyll-default-style.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/2015/06/19/customize-jekyll-default-style.html</guid>
        
        
      </item>
    
      <item>
        <title>python docstring使用</title>
        <description>&lt;p&gt;docstring，文档字符串, 是出现在函数或类开头以”&quot;”包围的字符序列。
可用来描述函数作用, 函数的使用方式及对函数做单元测试。&lt;/p&gt;

&lt;p&gt;docstring中类似运行在python交互解释器中的代码段, 可通过doctest模块
运行，基于docstring对函数做单元测试，是保证代码正确性的简单有效手段。&lt;/p&gt;

&lt;p&gt;help(funcname)或funcname.__doc__  输出的就是该函数docstring的内容.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;extract_post_head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;sd&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        extract the head of a html post, head contains&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        post name and post date.&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        &amp;gt;&amp;gt;&amp;gt; extract_post_head( r&amp;quot;blog\\2014\\01\\20\\adapter-model\\index.html&amp;quot;)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;        (&amp;#39;adapter-model&amp;#39;, &amp;#39;2014\\\\01\\\\20&amp;#39;)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;namepattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;r&amp;quot;([\w-]+)&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;[\w-]+\.html$&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;namepattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;datepattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;r&amp;quot;\d+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\d+&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;\d+&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;datepattern&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;filepath&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;group&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filename&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;date&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__name__&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;__main__&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
	&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;doctest&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;doctest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;testmod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;verbose&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;写上面的demo学到以下两点:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;转义\:  在string literal中需要4个\，在rawstring中只需要两个\&lt;/li&gt;
  &lt;li&gt;tuple中字符串的引号为单引号&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 16 Feb 2015 15:37:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/python/2015/02/16/python-docstring.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/python/2015/02/16/python-docstring.html</guid>
        
        
        <category>python</category>
        
      </item>
    
      <item>
        <title>正则表达式匹配罗马数字</title>
        <description>&lt;p&gt;最近开始重新学Python，做完了&lt;a href=&quot;https://www.hackerrank.com/&quot;&gt;hackerrank&lt;/a&gt; python tutorial的题目，基本语法算是掌握了。&lt;/p&gt;

&lt;p&gt;最后AC的一道题就是&lt;a href=&quot;https://www.hackerrank.com/challenges/regex-2-validate-a-roman-number&quot;&gt;正则匹配罗马数字&lt;/a&gt;。正则语法看过很多次，但感觉一直没有掌握，这次总算实战了一下，感觉正则匹配罗马数字
是学习基本正则的一个很好的case，stackoverflow也有与这相关的问题。在做这道题的时候，我也在在sof上面提了
一个&lt;a href=&quot;http://stackoverflow.com/questions/28381287/whats-the-difference-between-regular-pattern-abcd-and-abcd&quot;&gt;问题&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;先分析一下题目：&lt;/p&gt;

&lt;p&gt;要求是匹配[1~3999]之间的所有罗马数字，匹配则输出True,不匹配则输出False.罗马数字由以下几个字母表示：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I, 1, 最多出现3次&lt;/li&gt;
  &lt;li&gt;V, 5, 不能重复出现&lt;/li&gt;
  &lt;li&gt;X, 10, 最多出现3次&lt;/li&gt;
  &lt;li&gt;L, 50, 不能重复出现&lt;/li&gt;
  &lt;li&gt;C, 100, 最多出现3次&lt;/li&gt;
  &lt;li&gt;D, 500, 不能重复出现&lt;/li&gt;
  &lt;li&gt;M, 1000, 最多出现3次&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;只需按照1~10、10~100等分段表示罗马数字，然后由低到高组合所有段，即可得到匹配的正则表达式。&lt;/p&gt;
&lt;pre&gt;
[1,10): IX|IV|V|V?I{1,3}
		V?I{1,3}: 1~3, 6~8 
	 	IV: 4 
 	    IX: 9
 	    V: 5
 	    合并4与5得到 I?V 
 	    =&amp;gt; IX|I?V|V?I{1,3}

[10, 100): XC|XL|L|L?X{1,3}
		L?X(1,3): 10~30， 60~80
		XL: 40
		XC: 90
		L: 50
		合并40与50得到 X?L
		=&amp;gt; XC|X?L|L?X{1,3}
同理可得
	[100~1000): CM|C?D|D?C{1,3}
	[1000~4000): M{1,3}

综上：得到M{1,3}?|(CM|C?D|D?C{1,3})?|(XC|XL|L|L?X{1,3})?|(IX|I?V|V?I{1,3})?
      通过？,来达到四位数的组合，但是可能会出现空串的情况
      加上前向断言(?=.)，防止空串出现
最后得到：^(?=.)M{1,3}?(CM|C?D|D?C{1,3})?(XC|XL|L|L?X{1,3})?(IX|I?V|V?I{1,3})?$
&lt;/pre&gt;

&lt;p&gt;总结：&lt;/p&gt;

&lt;p&gt;^ab|cd$: 匹配以ab开头或以cd结尾的字符串&lt;/p&gt;

&lt;p&gt;^(ab|cd)$: 匹配ab或cd， 不匹配abcd&lt;/p&gt;

&lt;p&gt;(?=sth): look ahead assert前向断言, 匹配满足括号中正则的前面一个位置，不消耗字符,意味匹配了括号中的字符继续作为输入匹配后续正则.&lt;/p&gt;

&lt;p&gt;比如a(?=b): 匹配ab中的a &lt;br /&gt;
       (?=.)a: 只能匹配a&lt;/p&gt;

&lt;p&gt;(?:): not catch group，匹配括号正则的字符串会成为一个group被捕捉，捕捉group会降低匹配效率。对于无需
   捕捉group的正则，应该将每个()改为(?:).比如上面的罗马数字匹配正则就可以改为&lt;/p&gt;

&lt;table&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;^(?=.)M{1,3}?(?:CM&lt;/td&gt;
      &lt;td&gt;C?D&lt;/td&gt;
      &lt;td&gt;D?C{1,3})?(?:XC&lt;/td&gt;
      &lt;td&gt;XL&lt;/td&gt;
      &lt;td&gt;L&lt;/td&gt;
      &lt;td&gt;L?X{1,3})?(?:IX&lt;/td&gt;
      &lt;td&gt;I?V&lt;/td&gt;
      &lt;td&gt;V?I{1,3})?$&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

</description>
        <pubDate>Sun, 15 Feb 2015 12:23:00 +0800</pubDate>
        <link>http://sleefd.github.io/newblog/python/2015/02/15/match-roman-number-with-regex.html</link>
        <guid isPermaLink="true">http://sleefd.github.io/newblog/python/2015/02/15/match-roman-number-with-regex.html</guid>
        
        
        <category>python</category>
        
      </item>
    
  </channel>
</rss>
